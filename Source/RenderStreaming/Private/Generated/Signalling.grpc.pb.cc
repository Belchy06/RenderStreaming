// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Signalling.proto

#include "Signalling.pb.h"
#include "Signalling.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* SignallingService_method_names[] = {
  "/SignallingService/Ping",
  "/SignallingService/Offer",
  "/SignallingService/Answer",
};

std::unique_ptr< SignallingService::Stub> SignallingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SignallingService::Stub> stub(new SignallingService::Stub(channel, options));
  return stub;
}

SignallingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(SignallingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Offer_(SignallingService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Answer_(SignallingService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SignallingService::Stub::Ping(::grpc::ClientContext* context, const ::PingMsg& request, ::PongMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PingMsg, ::PongMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void SignallingService::Stub::async::Ping(::grpc::ClientContext* context, const ::PingMsg* request, ::PongMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PingMsg, ::PongMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void SignallingService::Stub::async::Ping(::grpc::ClientContext* context, const ::PingMsg* request, ::PongMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PongMsg>* SignallingService::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::PingMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PongMsg, ::PingMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PongMsg>* SignallingService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::PingMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SignallingService::Stub::Offer(::grpc::ClientContext* context, const ::OfferMsg& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::OfferMsg, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Offer_, context, request, response);
}

void SignallingService::Stub::async::Offer(::grpc::ClientContext* context, const ::OfferMsg* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::OfferMsg, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Offer_, context, request, response, std::move(f));
}

void SignallingService::Stub::async::Offer(::grpc::ClientContext* context, const ::OfferMsg* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Offer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SignallingService::Stub::PrepareAsyncOfferRaw(::grpc::ClientContext* context, const ::OfferMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::OfferMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Offer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SignallingService::Stub::AsyncOfferRaw(::grpc::ClientContext* context, const ::OfferMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOfferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SignallingService::Stub::Answer(::grpc::ClientContext* context, const ::AnswerMsg& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AnswerMsg, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Answer_, context, request, response);
}

void SignallingService::Stub::async::Answer(::grpc::ClientContext* context, const ::AnswerMsg* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AnswerMsg, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Answer_, context, request, response, std::move(f));
}

void SignallingService::Stub::async::Answer(::grpc::ClientContext* context, const ::AnswerMsg* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Answer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SignallingService::Stub::PrepareAsyncAnswerRaw(::grpc::ClientContext* context, const ::AnswerMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::AnswerMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Answer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SignallingService::Stub::AsyncAnswerRaw(::grpc::ClientContext* context, const ::AnswerMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAnswerRaw(context, request, cq);
  result->StartCall();
  return result;
}

SignallingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SignallingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SignallingService::Service, ::PingMsg, ::PongMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SignallingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PingMsg* req,
             ::PongMsg* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SignallingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SignallingService::Service, ::OfferMsg, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SignallingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OfferMsg* req,
             ::Empty* resp) {
               return service->Offer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SignallingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SignallingService::Service, ::AnswerMsg, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SignallingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AnswerMsg* req,
             ::Empty* resp) {
               return service->Answer(ctx, req, resp);
             }, this)));
}

SignallingService::Service::~Service() {
}

::grpc::Status SignallingService::Service::Ping(::grpc::ServerContext* context, const ::PingMsg* request, ::PongMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SignallingService::Service::Offer(::grpc::ServerContext* context, const ::OfferMsg* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SignallingService::Service::Answer(::grpc::ServerContext* context, const ::AnswerMsg* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}



// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Signalling.proto

#include "Signalling.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Empty::Empty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EmptyDefaultTypeInternal {
  constexpr EmptyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyDefaultTypeInternal _Empty_default_instance_;
constexpr PeerConfig::PeerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peerconnectionoptions_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PeerConfigDefaultTypeInternal {
  constexpr PeerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeerConfigDefaultTypeInternal() {}
  union {
    PeerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeerConfigDefaultTypeInternal _PeerConfig_default_instance_;
constexpr PlayerConnected::PlayerConnected(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PlayerConnectedDefaultTypeInternal {
  constexpr PlayerConnectedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerConnectedDefaultTypeInternal() {}
  union {
    PlayerConnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerConnectedDefaultTypeInternal _PlayerConnected_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Signalling_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Signalling_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Signalling_2eproto = nullptr;

const uint32_t TableStruct_Signalling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PeerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PeerConfig, peerconnectionoptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerConnected, playerid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Empty)},
  { 6, -1, -1, sizeof(::PeerConfig)},
  { 13, -1, -1, sizeof(::PlayerConnected)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PeerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerConnected_default_instance_),
};

const char descriptor_table_protodef_Signalling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Signalling.proto\"\007\n\005Empty\"+\n\nPeerConfi"
  "g\022\035\n\025peerConnectionOptions\030\001 \001(\t\"#\n\017Play"
  "erConnected\022\020\n\010playerId\030\001 \001(\t2\206\001\n\nSignal"
  "ling\022\033\n\007Connect\022\006.Empty\032\006.Empty\"\000\022\037\n\006Con"
  "fig\022\006.Empty\032\013.PeerConfig\"\000\022:\n\032SubscribeT"
  "oPlayerConnected\022\006.Empty\032\020.PlayerConnect"
  "ed\"\0000\001B\016Z\014./signallingb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Signalling_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Signalling_2eproto = {
  false, false, 270, descriptor_table_protodef_Signalling_2eproto, "Signalling.proto", 
  &descriptor_table_Signalling_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_Signalling_2eproto::offsets,
  file_level_metadata_Signalling_2eproto, file_level_enum_descriptors_Signalling_2eproto, file_level_service_descriptors_Signalling_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Signalling_2eproto_getter() {
  return &descriptor_table_Signalling_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Signalling_2eproto(&descriptor_table_Signalling_2eproto);

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Signalling_2eproto_getter, &descriptor_table_Signalling_2eproto_once,
      file_level_metadata_Signalling_2eproto[0]);
}

// ===================================================================

class PeerConfig::_Internal {
 public:
};

PeerConfig::PeerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PeerConfig)
}
PeerConfig::PeerConfig(const PeerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  peerconnectionoptions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    peerconnectionoptions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_peerconnectionoptions().empty()) {
    peerconnectionoptions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peerconnectionoptions(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PeerConfig)
}

inline void PeerConfig::SharedCtor() {
peerconnectionoptions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  peerconnectionoptions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeerConfig::~PeerConfig() {
  // @@protoc_insertion_point(destructor:PeerConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PeerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  peerconnectionoptions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerConfig::ArenaDtor(void* object) {
  PeerConfig* _this = reinterpret_cast< PeerConfig* >(object);
  (void)_this;
}
void PeerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PeerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerconnectionoptions_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string peerConnectionOptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_peerconnectionoptions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PeerConfig.peerConnectionOptions"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PeerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string peerConnectionOptions = 1;
  if (!this->_internal_peerconnectionoptions().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peerconnectionoptions().data(), static_cast<int>(this->_internal_peerconnectionoptions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PeerConfig.peerConnectionOptions");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_peerconnectionoptions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PeerConfig)
  return target;
}

size_t PeerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PeerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string peerConnectionOptions = 1;
  if (!this->_internal_peerconnectionoptions().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peerconnectionoptions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PeerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerConfig::GetClassData() const { return &_class_data_; }

void PeerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PeerConfig *>(to)->MergeFrom(
      static_cast<const PeerConfig &>(from));
}


void PeerConfig::MergeFrom(const PeerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PeerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_peerconnectionoptions().empty()) {
    _internal_set_peerconnectionoptions(from._internal_peerconnectionoptions());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerConfig::CopyFrom(const PeerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PeerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConfig::IsInitialized() const {
  return true;
}

void PeerConfig::InternalSwap(PeerConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &peerconnectionoptions_, lhs_arena,
      &other->peerconnectionoptions_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Signalling_2eproto_getter, &descriptor_table_Signalling_2eproto_once,
      file_level_metadata_Signalling_2eproto[1]);
}

// ===================================================================

class PlayerConnected::_Internal {
 public:
};

PlayerConnected::PlayerConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerConnected)
}
PlayerConnected::PlayerConnected(const PlayerConnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerid().empty()) {
    playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playerid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PlayerConnected)
}

inline void PlayerConnected::SharedCtor() {
playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  playerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerConnected::~PlayerConnected() {
  // @@protoc_insertion_point(destructor:PlayerConnected)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerConnected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerConnected::ArenaDtor(void* object) {
  PlayerConnected* _this = reinterpret_cast< PlayerConnected* >(object);
  (void)_this;
}
void PlayerConnected::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerConnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerConnected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerConnected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerConnected.playerId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerConnected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerConnected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerId = 1;
  if (!this->_internal_playerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerConnected.playerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerConnected)
  return target;
}

size_t PlayerConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerConnected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerId = 1;
  if (!this->_internal_playerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerConnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerConnected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerConnected::GetClassData() const { return &_class_data_; }

void PlayerConnected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerConnected *>(to)->MergeFrom(
      static_cast<const PlayerConnected &>(from));
}


void PlayerConnected::MergeFrom(const PlayerConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerConnected)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playerid().empty()) {
    _internal_set_playerid(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerConnected::CopyFrom(const PlayerConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerConnected::IsInitialized() const {
  return true;
}

void PlayerConnected::InternalSwap(PlayerConnected* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &playerid_, lhs_arena,
      &other->playerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerConnected::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Signalling_2eproto_getter, &descriptor_table_Signalling_2eproto_once,
      file_level_metadata_Signalling_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Empty* Arena::CreateMaybeMessage< ::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::PeerConfig* Arena::CreateMaybeMessage< ::PeerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PeerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerConnected* Arena::CreateMaybeMessage< ::PlayerConnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerConnected >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
